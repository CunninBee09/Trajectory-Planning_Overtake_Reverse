import numpy as np
import matplotlib.pyplot as plt
import matplotlib.transforms as transforms
import copy
import math
import sys
import pathlib
sys.path.append(str(pathlib.Path(__file__).parent.parent))

from QuinticPolynomialsPlanner.quintic_polynomials_planner import \
    QuinticPolynomial
from QuinticPolynomialsPlanner.quintic_polynomials_planner import quintic_polynomials_planner
from CubicSpline import cubic_spline_planner
from matplotlib.patches import Rectangle

SIM_LOOP = 1000

# Parameter
MAX_SPEED = 50.0 / 3.6  # maximum speed [m/s]
max_rspeed = 50.0 /3.6
MAX_ACCEL = 2.0  # maximum acceleration [m/ss]
max_raccel = 1.0
MAX_CURVATURE = 1.0  # maximum curvature [1/m]
MAX_ROAD_WIDTH = 5.0  # maximum road width [m]
D_ROAD_W = 1.0  # road width sampling length [m]
DT = 0.2  # time tick [s]
MAX_T = 5.0  # max prediction time [m]
MIN_T = 4.0  # min prediction time [m]
Target_speed = 20.0 / 3.6  # target speed [m/s]
D_T_S = 4.0 / 3.6  # target speed sampling length [m/s]
N_S_SAMPLE = 6  # sampling number of target speed
ego_length = 5 #car_length [m]
ego_width = 2 #car_width [m]
#Parking Space Parameters 

parkx = 40.0 # x coordinate for the parking 
parky = -10.0 # y coordinate for the parking 
pspot_length = 6.0
psport_breadth = 4.0
# cost weights
K_J = 0.1    #0.1                                                                                   
K_T = 0.1    #0.1
K_D = 0.2   #0.1
K_LAT = 1.0    #1.0
K_LON = 0.1     #0.1

show_animation = True


class QuarticPolynomial:

    def __init__(self, xs, vxs, axs, vxe, axe, time):
        # calc coefficient of quartic polynomial

        self.a0 = xs
        self.a1 = vxs
        self.a2 = axs / 2.0

        A = np.array([[3 * time ** 2, 4 * time ** 3],
                      [6 * time, 12 * time ** 2]])
        b = np.array([vxe - self.a1 - 2 * self.a2 * time,
                      axe - 2 * self.a2])
        x = np.linalg.solve(A, b)

        self.a3 = x[0]
        self.a4 = x[1]

    def calc_point(self, t):
        xt = self.a0 + self.a1 * t + self.a2 * t ** 2 + \
             self.a3 * t ** 3 + self.a4 * t ** 4

        return xt

    def calc_first_derivative(self, t):
        xt = self.a1 + 2 * self.a2 * t + \
             3 * self.a3 * t ** 2 + 4 * self.a4 * t ** 3

        return xt

    def calc_second_derivative(self, t):
        xt = 2 * self.a2 + 6 * self.a3 * t + 12 * self.a4 * t ** 2

        return xt

    def calc_third_derivative(self, t):
        xt = 6 * self.a3 + 24 * self.a4 * t

        return xt


class FrenetPath:

    def __init__(self):
        self.t = []
        self.d = []
        self.d_d = []
        self.d_dd = []
        self.d_ddd = []
        self.s = []
        self.s_d = []
        self.s_dd = []
        self.s_ddd = []
        self.cd = 0.0
        self.cv = 0.0
        self.cf = 0.0

        self.x = []
        self.y = []
        self.yaw = []
        self.ds = []
        self.c = []


def calc_frenet_paths(c_speed, c_accel, c_d, c_d_d, c_d_dd, s0,V):
    frenet_paths = []

    # generate path to each offset goal
    for di in np.arange(-MAX_ROAD_WIDTH, MAX_ROAD_WIDTH, D_ROAD_W):

        # Lateral motion planning
        for Ti in np.arange(MIN_T, MAX_T, DT):
            fp = FrenetPath()

            # lat_qp = quintic_polynomial(c_d, c_d_d, c_d_dd, di, 0.0, 0.0, Ti)
            lat_qp = QuinticPolynomial(c_d, c_d_d, c_d_dd, di, 0.0, 0.0, Ti)

            fp.t = [t for t in np.arange(0.0, Ti, DT)]
            fp.d = [lat_qp.calc_point(t) for t in fp.t]
            fp.d_d = [lat_qp.calc_first_derivative(t) for t in fp.t]
            fp.d_dd = [lat_qp.calc_second_derivative(t) for t in fp.t]
            fp.d_ddd = [lat_qp.calc_third_derivative(t) for t in fp.t]

            # Longitudinal motion planning (Velocity keeping)
            for tv in np.arange(V - D_T_S * N_S_SAMPLE,
                                V + D_T_S * N_S_SAMPLE, D_T_S):
                tfp = copy.deepcopy(fp)
                lon_qp = QuarticPolynomial(s0, c_speed, c_accel, tv, 0.0, Ti)

                tfp.s = [lon_qp.calc_point(t) for t in fp.t]
                tfp.s_d = [lon_qp.calc_first_derivative(t) for t in fp.t]
                tfp.s_dd = [lon_qp.calc_second_derivative(t) for t in fp.t]
                tfp.s_ddd = [lon_qp.calc_third_derivative(t) for t in fp.t]

                Jp = sum(np.power(tfp.d_ddd, 2))  # square of jerk
                Js = sum(np.power(tfp.s_ddd, 2))  # square of jerk

                # square of diff from target speed
                ds = (V - tfp.s_d[-1]) ** 2

                tfp.cd = K_J * Jp + K_T * Ti + K_D * tfp.d[-1] ** 2
                tfp.cv = K_J * Js + K_T * Ti + K_D * ds
                tfp.cf = K_LAT * tfp.cd + K_LON * tfp.cv

                frenet_paths.append(tfp)

    return frenet_paths

def calc_global_paths(fplist, csp):
    for fp in fplist:

        # calc global positions
        for i in range(len(fp.s)):
            ix, iy = csp.calc_position(fp.s[i])
            if ix is None:
                continue
            i_yaw = csp.calc_yaw(fp.s[i])
            di = fp.d[i]
            fx = ix + di * math.cos(i_yaw + math.pi / 2.0) 
            fy = iy + di * math.sin(i_yaw + math.pi / 2.0) 
            fp.x.append(fx)
            fp.y.append(fy)

        # calc yaw and ds
        for i in range(len(fp.x) - 1):
            dx = fp.x[i + 1] - fp.x[i]       #+1
            dy = fp.y[i + 1] - fp.y[i]       #+1
            fp.yaw.append(math.atan2(dy, dx))
            fp.ds.append(math.hypot(dx, dy))

        
        fp.yaw.append(fp.yaw[-1])
        fp.ds.append(fp.ds[-1])

        # calc curvature
        # for i in range(len(fp.yaw) - 1):
        #   if (fp.ds[i]==0): 
        #       fp.c.append(0)
        #   else :     
        #       fp.c.append((fp.yaw[i + 1] - fp.yaw[i]) / fp.ds[i])

    return fplist

def check_paths(fplist):
    ok_ind = []
    for i, _ in enumerate(fplist):
        #if fplist[i].s[1] >= parkx + 25: 
            #break
        if any([v > MAX_SPEED for v in fplist[i].s_d]):  # Max speed check
            continue
        elif any([abs(a) > MAX_ACCEL for a in
                  fplist[i].s_dd]):  # Max accel check
            continue
        elif any([abs(c) > MAX_CURVATURE for c in
                  fplist[i].c]):  # Max curvature check
            continue
        #elif not check_collision(fplist[i], ob):
            #continue

        ok_ind.append(i)

    return [fplist[i] for i in ok_ind]

def frenet_optimal_planning(csp, s0, c_speed, c_accel, c_d, c_d_d, c_d_dd,V):
    fplist = calc_frenet_paths(c_speed, c_accel, c_d, c_d_d, c_d_dd, s0,V)
    fplist = calc_global_paths(fplist, csp)
    fplist = check_paths(fplist)
    
    fplist.sort(key=lambda x: x.cf)
    # find minimum cost path
    min_cost = float("inf")
    best_path = None
    for fp in fplist:
        if min_cost >= fp.cf:
            min_cost = fp.cf
            best_path = fp

    return best_path,fplist

def generate_target_course(x, y):
    csp = cubic_spline_planner.CubicSpline2D(x, y) 
    s = np.arange(0, csp.s[-1], 0.1)

    rx, ry, ryaw, rk = [], [], [], []
    for i_s in s:
        ix, iy = csp.calc_position(i_s)
        rx.append(ix)
        ry.append(iy)
        ryaw.append(csp.calc_yaw(i_s))
        rk.append(csp.calc_curvature(i_s))

    return rx, ry, ryaw, rk, csp

def generate_reverse_target_course(x, y):
    csp = cubic_spline_planner.CubicSpline2D(x, y) 
    s = np.arange(0, csp.s[-1], 0.1)

    rx, ry, ryaw, rk = [], [], [], []
    for i_s in s:
        ix, iy = csp.calc_position(i_s)
        rx.append(ix)
        ry.append(iy)
        ryaw.append(csp.calc_yaw(i_s))
        rk.append(csp.calc_curvature(i_s))

    return rx, ry, ryaw, rk, csp


def generate_trajectory(startx, starty, endx, endy, controlx=None, controly=None, num_points=100):
    """
    Generate a smooth trajectory between a start and end point using a quadratic Bézier curve.

    Parameters:
        startx (float): Starting x-coordinate.
        starty (float): Starting y-coordinate.
        endx (float): Ending x-coordinate.
        endy (float): Ending y-coordinate.
        controlx (float): Control point x-coordinate (optional).
        controly (float): Control point y-coordinate (optional).
        num_points (int): Number of points on the trajectory.

    Returns:
        x_vals (numpy.ndarray): Array of x-coordinates.
        y_vals (numpy.ndarray): Array of y-coordinates.
    """
    # Default control point: midpoint with an offset to create curvature
    if controlx is None or controly is None:
        controlx = (startx + endx) / 2
        controly = (starty + endy) / 2 + 5  # Offset for curvature

    # Generate points on the Bézier curve
    t = np.linspace(0, 1, num_points)
    x_vals = (1 - t)**2 * startx + 2 * (1 - t) * t * controlx + t**2 * endx
    y_vals = (1 - t)**2 * starty + 2 * (1 - t) * t * controly + t**2 * endy

    return x_vals, y_vals

def generate_s_trajectory(x0, y0, parkx, parky,parking_spot_length, parking_spot_breath, m0=1, mf=0, k0=0, kf=0, num_points=40):
    """
    Generate an S-shaped trajectory between two points.
    
    Parameters:
        x0, y0 (float): Starting point coordinates.
        xf, yf (float): Ending point coordinates.
        m0, mf (float): Initial and final slopes (default: 0 for both).
        k0, kf (float): Initial and final curvatures (default: 0 for both).
        num_points (int): Number of points to generate along the trajectory.
        plot (bool): Whether to plot the trajectory (default: False).
    
    Returns:
        x (np.ndarray): Array of x-coordinates of the trajectory.
        y (np.ndarray): Array of y-coordinates of the trajectory.
    """
    # Construct the system of equations to solve for polynomial coefficients
    xf = parkx + parking_spot_length/2.0
    yf = parky
    A = np.array([
        [x0**5, x0**4, x0**3, x0**2, x0, 1],
        [xf**5, xf**4, xf**3, xf**2, xf, 1],
        [5*x0**4, 4*x0**3, 3*x0**2, 2*x0, 1, 0],
        [5*xf**4, 4*xf**3, 3*xf**2, 2*xf, 1, 0],
        [20*x0**3, 12*x0**2, 6*x0, 2, 0, 0],
        [20*xf**3, 12*xf**2, 6*xf, 2, 0, 0]
    ])
    b = np.array([y0, yf, m0, mf, k0, kf])

    # Solve for coefficients
    coefficients = np.linalg.solve(A, b)

    # Generate x and y points
    x = np.linspace(x0, xf, num_points)
    y = np.polyval(coefficients, x)
    return x,y

def straight_into_reverse(parking_x, parking_y, parking_spot_length, parking_spot_breath):
    startx = parking_x + parking_spot_length/2.0
    endx = parking_x - parking_spot_length/2.0
    starty = endy = parking_y
    straight_wx = []
    straight_wy = []

    r = np.arange(startx,endx, -0.1)
    for i in r:
        straight_wx.append(i)
        straight_wy.append(starty)
    
    return straight_wx,straight_wy

def straight_into_reverse_vertical(parking_x, parking_y, parking_spot_length, parking_spot_breath):
    startx = endx = parking_x
    starty = parking_y + parking_spot_breath/2.0
    endy = parking_y - parking_spot_breath/2.0
    
    straight_wx = []
    straight_wy = []

    r = np.arange(starty,endy, -0.1)
    for i in r:
        straight_wy.append(i)
        straight_wx.append(startx)
    
    return straight_wx,straight_wy

def parameter(csp, s0, c_speed, c_accel, c_d, c_d_d, c_d_dd, parkx, parky, Target_speed):
    if s0 < parkx :
        V1 = Target_speed
        
        path, fplist= frenet_optimal_planning(csp, s0, c_speed, c_accel, c_d, c_d_d, c_d_dd,V1)
    
    elif s0 > parkx and s0 < parkx +20.0:
        
        V2 = 1/3.6

        path, fplist= frenet_optimal_planning(csp, s0, c_speed, c_accel, c_d, c_d_d, c_d_dd,V2)
    
    elif s0 > parkx:

        V3 = 0.2/3.6

        path, fplist= frenet_optimal_planning(csp, s0, c_speed, c_accel, c_d, c_d_d, c_d_dd, V3)

    return path, fplist

def main():
    print(__file__ + " start!!")
    
    area = 35.0
    wx = [0.0, 10.0, 20.0, 40.0, 50.0, 65.0, 70.0, 80.0, 90.0, 100.0, 110.0, 120.0, 130.0] # Reference Path
    wy = [0.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0]

    tx,ty,tyaw,tc,csp = generate_target_course(wx,wy)
    
    #csp.ux = [x + 7.5*math.cos(i_yaw + math.pi / 2.0) for x,i_yaw in zip(tx,tyaw) ]
    #csp.uy = [y + 7.5*math.sin(i_yaw + math.pi / 2.0) for y,i_yaw in zip(ty,tyaw) ]
    
    
    #tx,ty,tyaw,tc,csp = generate_target_course(new_wx,new_wy)
    
    # Initial state for forward motion
    c_speed = Target_speed # Current speed [m/s]
    c_accel = 0.0  # Current acceleration [m/s^2]
    c_d = 0.0  # Current lateral position [m]
    c_d_d = 0.0  # Current lateral speed [m/s]
    c_d_dd = 0.0  # Current lateral acceleration [m/s^2]
    s0 = 0.0  # Current course position

    current_state = 'forward'
    r_speed = Target_speed  # Reverse speed [m/s]
    r_accel = 0.0  # Reverse acceleration [m/s^2]
    r_d = 0.0  # Reverse lateral position [m]
    r_d_d = 0.0  # Reverse lateral speed [m/s]
    r_d_dd = 0.0  # Reverse lateral acceleration [m/s^2]
    rs0 = s0  # Current reverse course position
    #r_speed = Target_speed  # Reverse speed [m/s]
    #r_accel = 0.0  # Reverse acceleration [m/s^2]
    #r_d = 0.0  # Reverse lateral position [m]
    #r_d_d = 0.0  # Reverse lateral speed [m/s]
    #r_d_dd = 0.0  # Reverse lateral acceleration [m/s^2]
    #rs0 = s0  # Current reverse course position
    csp.lx = [x - 2.5*math.cos(i_yaw + math.pi / 2.0) for x,i_yaw in zip(tx,tyaw) ]
    csp.ly = [y - 2.5*math.sin(i_yaw + math.pi / 2.0) for y,i_yaw in zip(ty,tyaw) ]
    csp.mx = [x + 2.5*math.cos(i_yaw + math.pi / 2.0) for x,i_yaw in zip(tx,tyaw) ]
    csp.my = [y + 2.5*math.sin(i_yaw + math.pi / 2.0) for y,i_yaw in zip(ty,tyaw) ]
    initial_lx = csp.lx.copy()
    initial_ly = csp.ly.copy()
    initial_mx = csp.mx.copy()
    initial_my = csp.my.copy()

    is_parallel_parking = pspot_length > psport_breadth

    for i in range(SIM_LOOP):
        
        if (current_state == 'forward'):
            
            path,fplist = parameter(csp,s0,c_speed,c_accel,c_d,c_d_d, c_d_dd,parkx, parky, Target_speed)
            s0 = path.s[1]
            c_d = path.d[1]
            c_d_d = path.d_d[1]
            c_d_dd = path.d_dd[1]
            c_speed = path.s_d[1]
            c_accel = path.s_dd[1]
            ego_y = path.y[1]
            ego_x = path.x[1]
            
            if(s0 >= parkx):
                current_state = 'interme'
                plt.pause(0.02)
                print("Parking Spot Detected!!!!Initiating Parking Manuever")
                continue

        elif (current_state == 'interme'):
                
                path,fplist = parameter(csp,s0,c_speed,c_accel,c_d,c_d_d, c_d_dd,parkx, parky, Target_speed)
                s0 = path.s[1]
                c_d = path.d[1]
                c_d_d = path.d_d[1]
                c_d_dd = path.d_dd[1]
                c_speed = path.s_d[1]
                c_accel = path.s_dd[1]   
                ego_y = path.y[1]
                ego_x = path.x[1]
                
                if (s0 >= parkx + 20.0):
                    plt.pause(0.04)
                    current_state = 'reverse'
                    
                    xvalue, yvalue = csp.calc_position(path.s[1])
                    
                    
                    if is_parallel_parking:
                        x1,y1 = generate_s_trajectory(xvalue,yvalue,parkx,parky,pspot_length,psport_breadth)
                        s1,s2 = straight_into_reverse(parkx,parky,pspot_length,psport_breadth)
                        new_wx = list(x1) + s1
                        new_wy = list(y1) + s2
                        tx,ty,tyaw,tc,csp = generate_target_course(new_wx,new_wy)
                        
                    
                    elif parky < 0 :
                        newx1 = [ego_x, ego_x - 1.0, parkx, parkx, parkx, parkx]
                        newy1 = [ego_y, ego_y, parky +4, parky+ 2, parky - 1.0, parky - 2.0]
                        tx,ty,tyaw,tc,csp = generate_target_course(newx1,newy1)
                            
                    elif parky > 0 : 
                        newwx1 =[ego_x, ego_x -1.0, parkx, parkx, parkx, parkx, parkx]
                        newwy1 = [ego_y, ego_y, parky -4, parky -2, parky, parky + 1, parky + 1.5]
                        tx,ty,tyaw,tc,csp = generate_target_course(newwx1,newwy1)
                        
                    csp.ax = [x - 2.5*math.cos(i_yaw + math.pi / 2.0) for x,i_yaw in zip(tx,tyaw) ]
                    csp.ay = [y - 2.5*math.sin(i_yaw + math.pi / 2.0) for y,i_yaw in zip(ty,tyaw) ]
                    csp.bx = [x + 2.5*math.cos(i_yaw + math.pi / 2.0) for x,i_yaw in zip(tx,tyaw) ]
                    csp.by = [y + 2.5*math.sin(i_yaw + math.pi / 2.0) for y,i_yaw in zip(ty,tyaw) ]
                    
                    continue

        
        elif (current_state == 'reverse'):
            path,fplist = parameter(csp,rs0,r_speed,r_accel,r_d,r_d_d,r_d_dd,parkx,parky,Target_speed)
            rs0 = path.s[1]
            r_d = path.d[1]
            r_d_d = path.d_d[1]
            r_d_dd = path.d_dd[1]
            r_speed = path.s_d[1]
            r_accel = path.s_dd[1]

            if np.hypot(path.x[1] - tx[-1], path.y[1] - ty[-1]) <= 2.5:
                break
       
       
        if show_animation:
                    plt.cla()
                    plt.gcf().canvas.mpl_connect('key_release_event', lambda event: [exit(0) if event.key == 'escape' else None])
                    plt.plot(tx, ty)
                    #plt.plot(csp.mx, csp.my, '-.', color = 'Gray')      
                    csp.lx = [x - 2.5*math.cos(i_yaw + math.pi / 2.0) for x,i_yaw in zip(tx,tyaw) ]
                    csp.ly = [y - 2.5*math.sin(i_yaw + math.pi / 2.0) for y,i_yaw in zip(ty,tyaw) ]
                    csp.mx = [x + 2.5*math.cos(i_yaw + math.pi / 2.0) for x,i_yaw in zip(tx,tyaw) ]
                    csp.my = [y + 2.5*math.sin(i_yaw + math.pi / 2.0) for y,i_yaw in zip(ty,tyaw) ]  
                    csp.ax = [x - 2.5*math.cos(i_yaw + math.pi / 2.0) for x,i_yaw in zip(tx,tyaw) ]
                    csp.ay = [y - 2.5*math.sin(i_yaw + math.pi / 2.0) for y,i_yaw in zip(ty,tyaw) ]
                    csp.bx = [x + 2.5*math.cos(i_yaw + math.pi / 2.0) for x,i_yaw in zip(tx,tyaw) ]
                    csp.by = [y + 2.5*math.sin(i_yaw + math.pi / 2.0) for y,i_yaw in zip(ty,tyaw) ]   
                    plt.plot(initial_lx, initial_ly, label='Left Path (Initial)', color='black')
                    plt.plot(initial_mx, initial_my, label='Middle Path (Initial)', color='black')       
                    plt.plot(csp.mx, csp.my, '--')
                    plt.plot(csp.lx, csp.ly, '--')
                    plt.plot(csp.ax, csp.ay, '--')
                    plt.plot(csp.bx, csp.by, '--')
                    px, py, yaw = path.x[1], path.y[1], path.yaw[1]
                    ego_yaw = path.yaw[1] * 180 /np.pi
                    ego_vehicle = Rectangle((px - ego_length / 2.0, py - ego_width / 2.0), ego_length, ego_width, facecolor = 'Red',edgecolor='Black')
                    t = transforms.Affine2D().rotate_deg_around(path.x[1], path.y[1], ego_yaw) + plt.gca().transData
                    parkingspot = Rectangle((parkx - pspot_length / 2, parky - psport_breadth / 2), pspot_length, psport_breadth, linewidth=2, edgecolor='blue')
                    ego_vehicle.set_transform(t)  
                    #parkingspot = plt.Rectangle((parkx - pspot_length / 2, parky - psport_breadth / 2), pspot_length, psport_breadth, linewidth=2, edgecolor='blue')
                    plt.gca().add_patch(parkingspot)
                    plt.gca().add_patch(ego_vehicle)
                    for i, fp in enumerate(fplist[:500]): 
                        plt.plot(fp.x, fp.y, label=f"Path {i + 1} (Cost: {fp.cf:.4f})", linestyle="--",color = 'green')
                    plt.plot(path.x[1:], path.y[1:], '-r')
                    #plt.plot(path.x[1], path.y[1], "vc")
                    plt.xlim(path.x[1] - area, path.x[1] + area)
                    plt.ylim(path.y[1] - area, path.y[1] + area)
                    plt.title("v[km/h]:" + str(c_speed * 3.6)[0:4])
                    plt.grid(True)
                    plt.pause(0.02)
    
    print("Finish")

    if show_animation:  # pragma: no cover
        plt.grid(True)
        plt.pause(0.02)
        plt.show()


if __name__ == '__main__':
    main()
